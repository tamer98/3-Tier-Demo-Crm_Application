name: demo-crm CI/CD
on:
  push:
    branches:
      - main
jobs:
  CI:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run: 
        working-directory: ./demo-crm-main
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      # Allow the runner to check out the source code from the repository.
#Clone/Pull(1)

          
# Build the application (2)
    - name: Build the application
      run: |
        npm install  # Installs dependencies (use instead of npm install)
        npm run build  # Builds the Next.js app
        npm run dev &  # Start the development server in the background

    - name: wait for server to be upload
      run: sleep 5
      
    - name: Check application 
      run: curl http://localhost:3000
      
#Package step (4)
    - name: Build Docker image
      run: docker build -t demo-crm:latest .
      
        
#E2E (5)
    - name: Deploy testing environment
      run: docker compose up -d
      
    - name: Check running containers and existed images
      run: |
        docker ps -a
        docker images
        
    - name: wait application to be upload
      run: sleep 5

    - name: Create character 
      run: |
          response=$(curl -s -X POST http://localhost:80/api/clients
          -H "Content-Type: application/json"
          -d '{
            "name": "Koko",
            "email": "Koko.com",
            "company": "Koko Dev",
            "website": "https://Kokothegreat.com"
          }')
          echo "Response from POST request: $response"
          if [[ "$response" != *"Success , Character added"* ]]; then
            echo "Failure , Failed to add character"
            exit 1
          fi

    - name: Character search
      run: |
          response=$(curl -s http://localhost:80/api/clients)
          echo "Response from GET request: $response"
          # Check for the customer name in the response (ensure correct structure)
          if [[ "$response" == *"Koko"* ]]; then
            echo "Success , Character found"
          else
            echo "Failure , Character not found"
            exit 1
          fi

    # - name: Delete character
    #   run: |
    #     response=$(curl --write-out "%{http_code}" --silent --output /dev/null -X DELETE http://localhost:3000/person/1)
    #     if [ "$response" -ne 200 ]; then
    #       echo "Failure , Character not deleted"
    #       exit 1
    #     else
    #       echo "Success , Character deleted"
    #     fi

    - name: Confirm character deletion
      run: |
        response=$(curl -s http://localhost:80/api/clients)
        echo "Response after DELETE: $response"

        if [[ "$response" == *"Koko"* ]]; then
          echo "Failure , Character exist"
          exit 1
        else
          echo "Success , Character not found"
        fi

    - name: Remove testing environment
      run: docker compose down -v

      
# AWS connect
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
        aws-region: ap-south-1
        
    - name: Authenticate Docker to AWS ECR
      run: ${{ secrets.DOCKER_AUTENTICATES_AWS }}
      # Authenticates Docker to AWS ECR using the AWS CLI.
   
    - name: Tag Docker image
      run: docker tag demo-crm:latest 390844757505.dkr.ecr.ap-south-1.amazonaws.com/development/demo-crm:latest
      # Tags the Docker image for the ECR repository.
  
    - name: Push Docker image to ECR
      run: docker push 390844757505.dkr.ecr.ap-south-1.amazonaws.com/development/demo-crm:latest
      # Pushes the Docker image to the specified ECR repository.


    # - name: Update Kubernetes Deployment
    #   run: |
    #     aws eks --region ap-south-1 update-kubeconfig --name tamer-cluster
    #     kubectl set image deployment/demo-crm-deployment demo-crm-container=390844757505.dkr.ecr.ap-south-1.amazonaws.com/development/demo-crm:deploy
    #     kubectl rollout status deployment/demo-crm-deployment
    #     kubectl get pods
    #     kubectl describe deployment demo-crm
        
